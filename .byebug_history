continue
self.recording_id
self.recordings_id
continue
exit
Song.find(song_id)
self.user_id
self.song_id
song_id
self.recording_id
attrs
attributes
self.attributes
exit
@user.recordings.second.song
@user.recordings.first.user
@user.recordings.first.song
@user.recordings.first
@user.recordings.first.song
@user.recordings.first
@user.recordings
exit
@song.recordings.find_by(user: @user)
@song.recordings
@song
exit
new_recording.valid?
new_recording.date = Time.at(recording['date'])
new_recordings.date = Time.at(recording['date'])
Time.at(recording['date'])
recording['date']
new_recording.errors
new_recording.save
new_recording.valid?
exit
ratings.find_by(user: user)
ratings.find_by(user: current_user)
ratings.find()
ratings
user = User.find(user_id)
ratings.find(user: User.find(user_id))
ratings
exit
User.genders
User.gender
User.genders
user.profile.gender.key
user.profile.gender.jkey
user.profile.gender.to_i
user.profile.gender
user.profile
exit
User.find(2).profile
User.find(2)
self.profile
self.id
exit
self.id
exit
profile.gender
exit
profile
profile.gender
exit
user.profile.gender
user.profile.gender = 1
user.profile.gender.to_i
user.profile.gender
user.gender
user
exit
profile.attributes
profile
user
exit
attrs
attrs.delete('sign_in_count')
attrs.delete('reset_password_token')
attrs.delete('encrypted_password')
attrs
attrs.delete('id')
attrs = attributes
attrs
attributes
attribute
profile
attributes
attribute
exit
request
reques
exit
json['eventId']
json.eventId
json = JSON.parse(request.body)
JSON.parse(request.body)
JSON.parse(request.to_s)
JSON.parse(request)
request
JSON.parse(resquest)
JSON.parse(response)
JSON.parse
JSON.
JSON
request.body.to_s
request.body.to_h
request.body[""]
request.body
request.to_json.body
request.body
request.body["eventId"]
request.body.to_json.eventId
request.body.to_json
request.body['eventId']
request.body.eventId
request.body.eventID
request.response
request.body
response.to_json
response.body
request
request.HAS_BODY
request.response
request.date
request.to_json
request.response
request
exit
   49:       #   self.idEXIT
   48:       #   'user',
   47:       #   '$set',
PIO_CLIENT:create_event(
PIO_CLIENT
exit
pio_client
exit
profile_info
profile_indo
exit
request.results
request = Rating.all query: {bool: { must: [{ match: { user_id: user_id}},{match: {song_id: self.song_spotify_id}}]}}
exit
self.song_spotify_id
self.id
self.spotify_song_id
self.id
request.results
request
request = Rating.all query: {bool: { must: [{ match: { user_id: user_id}},{match: {song_id: self.id}}]}}
self.id
exit
@rating
exit
@song.id
@song
exit
rating
exit
rating
exit
params[:rating]
params[:value]
rating
exit
request.results
request.results.total
request.results.count
request.results[0]
request
exit
current_song
exit
current_song
exit
current_song.total
current_song.results.total
current_song.results
current_song
exit
params[:user_id]
params[:song_id]
params[:per_page]
params[:page]
exit
Recording.all
Recording.class
Recording.scroll
results
exit
results
exit
results
exit
results
exit
results
exit
results
exit
results
exit
results
results.results
results.excecute
results
exit
entry
exit
r['song_id']
r = data[0]
data[0]
data
data['interest_id']
data['interes_id']
data['song_id']
data['user_id']
exit
new_recording.id
exit
params[:recording]
exit
data[0]['user_id']
data[0].user_id
data[0]
data
exit
data['0']
data[0]
data
exit
data
data[:recording]
data['recording']
data
data.recording
data
data['data']
data
data.data
exit
data
exit
result
exit
response
exit
response
response[0]
response
exit
response[5]
response.reject {|x| x['_source']['song_id']}
response[5]
response.reject {|x| x['_source']['song_id']==nil}
response.reject {|x| unless x['_source']}
response.reject {|x| unless x['_source']['song_id']}
