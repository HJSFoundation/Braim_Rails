exit
request.results
request = Rating.all query: {bool: { must: [{ match: { user_id: user_id}},{match: {song_id: self.song_spotify_id}}]}}
exit
self.song_spotify_id
self.id
self.spotify_song_id
self.id
request.results
request
request = Rating.all query: {bool: { must: [{ match: { user_id: user_id}},{match: {song_id: self.id}}]}}
self.id
exit
@rating
exit
@song.id
@song
exit
rating
exit
rating
exit
params[:rating]
params[:value]
rating
exit
request.results
request.results.total
request.results.count
request.results[0]
request
exit
current_song
exit
current_song
exit
current_song.total
current_song.results.total
current_song.results
current_song
exit
params[:user_id]
params[:song_id]
params[:per_page]
params[:page]
exit
Recording.all
Recording.class
Recording.scroll
results
exit
results
exit
results
exit
results
exit
results
exit
results
exit
results
exit
results
results.results
results.excecute
results
exit
entry
exit
r['song_id']
r = data[0]
data[0]
data
data['interest_id']
data['interes_id']
data['song_id']
data['user_id']
exit
new_recording.id
exit
params[:recording]
exit
data[0]['user_id']
data[0].user_id
data[0]
data
exit
data['0']
data[0]
data
exit
data
data[:recording]
data['recording']
data
data.recording
data
data['data']
data
data.data
exit
data
exit
result
exit
response
exit
response
response[0]
response
exit
response[5]
response.reject {|x| x['_source']['song_id']}
response[5]
response.reject {|x| x['_source']['song_id']==nil}
response.reject {|x| unless x['_source']}
response.reject {|x| unless x['_source']['song_id']}
response[5]
exit
songs_ids
exit
response[10]
response[9]
response[8]
response[7]
response[6]
response[5]
response[4]
response`3]
response
exit
clean_recordings[20]
clean_recordings.size
clean_recordings[11]
clean_recordings[10]
clean_recordings[9]
clean_recordings[8]
clean_recordings[7]
clean_recordings[6]
clean_recordings[5]
clean_recordings[4]
clean_recordings[3]
clean_recordings[2]
clean_recordings[1]
clean_recordings[0]
clean_recordings
exit
clean_recordings[0]['_source']
clean_recordings[0]
clean_recordings.map {|w| w[0]}
clean_recordings.map {|w| w}
clean_recordings.map {|w| w['_source']}
clean_recordings.map
clean_recordings[2]
clean_recordings
exit
clean_recordings
exit
clean_recordings[0]['_source']['song_id']
clean_recordings[0]['_source']
clean_recordings[0][_source]
clean_recordings.map {|r| r['_source']['song_id']}
clean_recordings[6]
clean_recordings[8]
clean_recordings[6]
clean_recordings[3]
clean_recordings[4]
clean_recordings[2]
clean_recordings[0]
clean_recordings,map
clean_recordingsmap
clean_recordings
exit
songs_id
clean_recordings
exit
songs_ids
songs_id
exit
@recordings[0]['song_info']
@recordings[0]['song_info'][0]
exit
@recordings[0]['song_info'][0]
@recordings[0]['song_info']
clear
@recordings[0]['song_info']
@recordings[0]
@recordings
exit
@recordings.first[:song_info]
@recordings.first['song_info']
@recordings.first['_song_info']
@recordings.first['_source']
@recordings.first.song_info
@recordings.first
@recordings
exit
r
exit
r['song_info']
r
r['_source']
r
current_song
r
r['song_info']
r[song_info]
r.current_song
r.song_info
r.
r.merge(:song_info => current_song)
r.song_info
r.merge(:song_info => current_song)
r.current_song
r[:current_song] = current_song
r
current_song
r['song_info']
r.song_info
r
exit
@recordings[3]
@recordings[2]
@recordings[0]
@recordings[0].song_info
@recordings[0]
@recordings
exit
e
RSpotify::Track.find(songs_ids)
songs_ids
exit
songs_ids
exit
songs_ids
exit
@artists[4]
@artists.third
@artists.second
@artists.size
@artists
@artists.first.last
@artists.first.images
@artists.first
@artists
exit
end
@artists
@artist
RSpotify::Artist.search(params[:query]).first.images.first["url"]
RSpotify::Artist.search(params[:query]).first.images.first
RSpotify::Artist.search(params[:query]).first.images
RSpotify::Artist.search(params[:query]).first.images["url"]
RSpotify::Artist.search(params[:query]).first.images
RSpotify::Artist.search(params[:query]).images
