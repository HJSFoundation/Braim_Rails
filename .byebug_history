continue
exit
continue
exit
continue
exit
continue
exit
continue
sum
exit
continue
score
continue
exit
continue
score
continue
exit
continue
score
continue
score
continue
score
continue
recommendation_list.first.song
recommendation_list.first.score
recommendation_list.first
recommendation_list
continue
score
continue
score
continue
User.first.songs.count
User.songs.count
User.first.songs.count
User.songs.count
Song.count
unknown_songs.count
unknown_songs
continue
user_1_diff
continue
user_1_diff
continue
user_1_diff
continue
user_1_diff
continue
user_1_diff
continue
user_1_diff
continue
user_1_diff
user_1_dif
exit
echonest_query_id
song_profile.id
echonest_query_id
echones_query_id
song_profile.id
song_profile
song_progile
exit
Echowrap.song_profile(id:echonest_query_id, bucket: ['id:spotify','tracks','audio_summary','song_type'],limit:true)
song
continue
Song.find_by(echonest_query_id: 'SOHSBXH12A8C13B0DF')
echonest_query_id
echones_query_id
song
continue
song
continue
song
continue
Song.last
Song.find_by(echonest_id: 'SOHMYGC12A6D4FAC4B')
Song.last
Song.find_by(echonest_id: 'SOQMMHC12AB0180CB8')
echonest_query_id
song
exit
song_echonest_info
exit
@recommendations[0].item
@recommendations[0]
@recommendations
user_songs
continue
exit
songs.uniq
songs.all
songs
songs.songs
songs[0]
songs
recordings
exit
@recommendations[4].song
@recommendations[3].song
@recommendations[2].song
@recommendations[1].song
@recommendations[0].song
@recommendations[0]
@recommendations
request
request = Net::HTTP.get('example.com', '/index.html') #
Net::HTTP.get('example.com', '/index.html') #
@client.query('uid' => 'foobar')
end
  ...
rescue ServerError => e
  ...
rescue BadRequestError => e
  ...
rescue NotFoundError => e
  result = client.query('uid' => 'foobar')
begin
@client.query("user"=>2)
@client.query --help
@client.query
@client
@client.query(user:2,number:2)
@client.query(user:2,:number:2)
exit
@client.send_query(user:2,number:2)
@client
@client.get_status()
continue
query
continue
exit
entry.save
entry
continue
exit
JSON.parse(request.body)['eventId']exit
JSON.parse(request.body)['eventId']
JSON.parse(request.body)
JSON.parse(request.body).eventId
JSON.parse(request.body).eventID
request.body.to_js
continue
request.body
request
continue
self.recording_id
self.recordings_id
continue
exit
Song.find(song_id)
self.user_id
self.song_id
song_id
self.recording_id
attrs
attributes
self.attributes
exit
@user.recordings.second.song
@user.recordings.first.user
@user.recordings.first.song
@user.recordings.first
@user.recordings.first.song
@user.recordings.first
@user.recordings
exit
@song.recordings.find_by(user: @user)
@song.recordings
@song
exit
new_recording.valid?
new_recording.date = Time.at(recording['date'])
new_recordings.date = Time.at(recording['date'])
Time.at(recording['date'])
recording['date']
new_recording.errors
new_recording.save
new_recording.valid?
exit
ratings.find_by(user: user)
ratings.find_by(user: current_user)
ratings.find()
ratings
user = User.find(user_id)
ratings.find(user: User.find(user_id))
ratings
exit
User.genders
User.gender
User.genders
user.profile.gender.key
user.profile.gender.jkey
user.profile.gender.to_i
user.profile.gender
user.profile
exit
User.find(2).profile
User.find(2)
self.profile
self.id
exit
self.id
exit
profile.gender
exit
profile
profile.gender
exit
user.profile.gender
user.profile.gender = 1
user.profile.gender.to_i
user.profile.gender
user.gender
user
exit
profile.attributes
profile
user
exit
attrs
attrs.delete('sign_in_count')
attrs.delete('reset_password_token')
attrs.delete('encrypted_password')
attrs
attrs.delete('id')
attrs = attributes
attrs
attributes
attribute
profile
attributes
attribute
exit
request
reques
exit
json['eventId']
json.eventId
json = JSON.parse(request.body)
JSON.parse(request.body)
JSON.parse(request.to_s)
JSON.parse(request)
request
JSON.parse(resquest)
JSON.parse(response)
JSON.parse
JSON.
JSON
request.body.to_s
request.body.to_h
request.body[""]
request.body
